from exception import DBException
from builder import SQLBuilder
from resultset import ResultSet
from column import Column
from query import Query
from row import Row
from literal import Literal
from structure import Structure
from utils import TableValidator
    
__all__ = ['Table']
    
class TableSelect(TableValidator):

    def __init__(self, name, sql):
        super(TableSelect, self).__init__(name)
        self._sql = sql
    
    def __str__(self):
        return 'Table: %s' % self._table_name
        
    def limit(self, limit):
        limit = self._check_limit(limit)
        self._sql.add_limit_condition(limit)
        return self._table_select_instance()
    
    def order(self, order):
        self._check_column_in_table(order)
        self._sql.add_order_condition(order)
        return self._table_select_instance()
            
    
    def where(self, *args, **kwargs):
        self._validate_where(args, kwargs)
        self._sql.add_where_conditions(kwargs)
        self._sql.add_where_literals(args)
        return self._table_where_instance()
    
    def select(self, *args):
        if args:
            map(self._check_column_in_table, args)
            self._sql.add_select_args(args)
        else:
            self._sql.add_select_args(Structure.get_all_columns(self._table_name))
        select_query, select_args = self._sql.build_select()
        data = Query().execute_and_fetch(select_query, select_args)
        data = self._parse_data(data)
        return data
            
    def _table_select_instance(self):
        return TableSelect(self._table_name, self._sql)
        
    def _table_where_instance(self):
        return TableWhere(self._table_name, self._sql)
        
    def _parse_data(self, data):
        return [Row(dict(zip(Structure.get_all_columns(self._table_name), data_row)), self._table_name) for data_row in data]
    
class TableWhere(TableSelect):
    
    def delete(self):
        Query().execute(*self._sql.build_delete())
        return None
        
    def update(self, **kwargs):
        self._validate_update(kwargs)
        self._sql.add_update_kwargs(kwargs)
        self._sql.add_returning_args(Structure.get_all_columns(self._table_name))
        update_query, update_args = self._sql.build_update()
        data = Query().execute_and_fetch(update_query, update_args)
        data = self._parse_data(data)
        return data
        
class Table(TableWhere):

    def __init__(self, name):
        super(Table, self).__init__(name, SQLBuilder(name))
    
    def insert(self, *args, **kwargs):
        self._validate_insert(args, kwargs)
        self._sql.add_insert_kwargs(kwargs)
        self._sql.add_returning_args(Structure.get_all_columns(self._table_name))
        insert_query, insert_args = self._sql.build_insert()
        data = Query().execute_and_fetch(insert_query, insert_args)
        data = self._parse_data(data)
        return data
        
    def row(**kwargs):
        self._validate_row(kwargs)
        
    def __getattr__(self, attr):
        if Structure.table_has_column(self._table_name, attr):
            return Column(attr)
        else:
            raise AttributeError("'%s' object has no attribute '%s'" % (type(self), attr))
            
    

